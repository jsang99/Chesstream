/*
 * SPIDriver.h
 *
 * Created: 2023-12-01 7:26:24 PM
 *  Author: vicga
 */ 


#ifndef SPIDRIVER_H_
#define SPIDRIVER_H_

#include <FreeRTOS.h>
#include <asf.h>
#include <semphr.h>
#include <task.h>

#include "spi.h"
#include "spi_interrupt.h"

#define SLAVE_SELECT_PIN EXT1_PIN_SPI_SS_0
#define BUF_LENGTH (24 * 16)
#define CONF_SPI_SLAVE_ENABLE 1

struct spi_module spi_master_instance;
struct spi_slave_inst slave;

volatile bool transrev_complete_spi_master;

static uint8_t rd_buffer[BUF_LENGTH];
static uint8_t wr_buffer[BUF_LENGTH] = {
	0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
	0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
	0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
	0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
	0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
	0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
	0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
	0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 
	0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F,
	0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F,
	0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F,
	0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F,
	0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F,
	0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F,
	0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F,
	0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F,
	
};

#define ERROR_NONE 0
#define ERROR_INVALID_DATA -1
#define ERROR_NO_CHANGE -2
#define ERROR_ABORTED -3
#define ERROR_BUSY -4
#define ERROR_SUSPEND -5
#define ERROR_IO -6
#define ERROR_REQ_FLUSHED -7
#define ERROR_TIMEOUT -8
#define ERROR_BAD_DATA -9
#define ERROR_NOT_FOUND -10
#define ERROR_UNSUPPORTED_DEV -11
#define ERROR_NO_MEMORY -12
#define ERROR_INVALID_ARG -13
#define ERROR_BAD_ADDRESS -14
#define ERROR_BAD_FORMAT -15
#define ERROR_BAD_FRQ -16
#define ERROR_DENIED -17
#define ERROR_ALREADY_INITIALIZED -18
#define ERROR_OVERFLOW -19
#define ERROR_NOT_INITIALIZED -20
#define ERROR_SAMPLERATE_UNAVAILABLE -21
#define ERROR_RESOLUTION_UNAVAILABLE -22
#define ERROR_BAUDRATE_UNAVAILABLE -23
#define ERROR_PACKET_COLLISION -24
#define ERROR_PROTOCOL -25
#define ERROR_PIN_MUX_INVALID -26
#define ERROR_UNSUPPORTED_OP -27
#define ERROR_NO_RESOURCE -28
#define ERROR_NOT_READY -29
#define ERROR_FAILURE -30
#define ERROR_WRONG_LENGTH -31
#define ERROR_RINGBUFFER_NO_SPACE_LEFT -32
#define ERROR_I2C_HANG_RESET -33

int32_t SPIInitializeDriver(void);

void configure_spi_master(void);
void configure_spi_master_callbacks(void);
static void callback_spi_master(struct spi_module *const module);

int32_t SPIFreeMutex(void);
int32_t SPIGetMutex(TickType_t waitTime);




#endif /* SPIDRIVER_H_ */